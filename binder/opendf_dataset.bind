py::class_<DataSet> PyDataSet(m, "DataSet", py::dynamic_attr());

PyDataSet.def(py::init<>())
    .def("def_int32", &DataSet::def<int>, py::arg("key") = "0", py::arg("size") = 1)
    .def("def_float64", &DataSet::def<double>, py::arg("key") = "0", py::arg("size") = 1)
    .def("def_complex128", &DataSet::def<std::complex<double>>, py::arg("key") = "0", py::arg("size") = 1)
    .def("undef", &DataSet::undef, py::arg("key") = "0");
    
PyDataSet.def("numpy", [](DataSet& self, const std::string& key) {
    details::NodeGeneric::NodeType n_type;
    details::NodeGeneric::SizeType n_size;
    details::NodeGeneric::DataType* n_data;
    std::tie(n_type, n_size, n_data, std::ignore) = self.info(key);
    switch (n_type) {
        case details::NodeGeneric::NodeType::Int: {
            return py::array({n_size},                                          // shape
                             {sizeof(int)},                                     // stride
                             (int*) n_data,                                     // data pointer
                             py::capsule(n_data, [](void* _void_n_data) { ; })  // zero-copy cost
            );
            break;
        }
        case details::NodeGeneric::NodeType::Real: {
            return py::array({n_size},                                          // shape
                             {sizeof(num_real)},                                // stride
                             (num_real*) n_data,                                // data pointer
                             py::capsule(n_data, [](void* _void_n_data) { ; })  // zero-copy cost
            );
            break;
        }
        case details::NodeGeneric::NodeType::Complex: {
            return py::array({n_size},                                          // shape
                             {sizeof(num_complex)},                             // stride
                             (num_complex*) n_data,                             // data pointer
                             py::capsule(n_data, [](void* _void_n_data) { ; })  // zero-copy cost
            );
            break;
        }
        default:
            throw std::runtime_error("can not converted to numpy!");
    }
    return py::array();
});

PyDataSet.def("__repr__", [](DataSet& self) { return self.repr(details::NodeGeneric::Format::Json); });
