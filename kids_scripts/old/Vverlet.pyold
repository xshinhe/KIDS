#!/usr/bin/env python3
# coding=utf-8

#    COBRAMM
#    Copyright (c) 2019 ALMA MATER STUDIORUM - Universit√† di Bologna

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# import statments of module from python standard library

import os  # operating system utilities
import shelve  # python object persistence
import copy  # shallow and deep copy operations
import shutil  # filesystem utilities

# imports of local modules

import product
import molpro
import CBF
import logwrt  # manages log file output + start/end procedures
import constants  # physical constants and conversion factors

# imports of user-defined classes

from Timer import Timer  # keep timings of the different sections of the code

# math libraries

import numpy as np  # numpy library for scientific computation


# *********************************************************************
# Velocities at t+dt/2 : v(t+dt/2)= v(t)+(F(t)/m)*dt/2
# and
# positions at t+dt : r(t+dt)= r(t)+v(t)*dt+(F(t)/m)*dt^2/2
# *********************************************************************

def isotopes(cobcom,command,masses,step,vx,vy,vz):
    ISO = CBF.ReadCobramCommand(cobcom, 'isotopes', 'isotopes')
    if (len(ISO)) == 0 and int(command[2]) > 0:
        print( "NO ISOTOPE section, continuing")
    else:
        try:
            oldmass = []
            for i in range(len(ISO)):
                isotopes = ISO[i].split()
                atnum = int(isotopes[0]) - 1
                # careful, this starts counting at zero!
                print( "modifying the mass of atom number:", isotopes[0])
                print( "current mass   :", float(masses[atnum] / constants.amu2au))
                oldmass.append(float(masses[atnum] / constants.amu2au))
                print( "new mass       :", float(isotopes[1]))
                masses[atnum] = float(float(isotopes[1]) * constants.amu2au)
                print( "in atomic units:", masses[atnum])
        except:
            logwrt.fatalerror('severe PROBLEM with isotope section (empty line ??)')
    if step == 0 and command[193] == '1':
        E_kin = 0.0
        if (len(ISO)) == 0:
            logwrt.fatalerror('there are no isotopes, check !isotope section!')
        for i in range(len(ISO)):
            isotopes = ISO[i].split()
            atnum = int(isotopes[0])
            print( "Changing velocitiy of atom number", atnum)
            print( "initial velocity (x,y,z):", vx[atnum], vy[atnum], vz[atnum])
            vx_new = vx[atnum] * oldmass[i] * constants.amu2au / masses[atnum]
            vx[atnum] = vx_new
            vy_new = vy[atnum] * oldmass[i] * constants.amu2au / masses[atnum]
            vy[atnum] = vy_new
            vz_new = vz[atnum] * oldmass[i] * constants.amu2au / masses[atnum]
            vz[atnum] = vz_new
            print( "new scaled velocity", vx[atnum], vy[atnum], vz[atnum])
            E_kin = E_kin + 0.5 * (vx[i] ** 2 + vy[i] ** 2 + vz[i] ** 2) * masses[i]
            print( "Ekin=", E_kin, "hartree")

    return masses,vx,vy,vz


def rattle_first(CSA,vx,vy,vz,x,y,z,masses,tol,iniD): 
    loop = False
    while not loop:
        check = []
        for i in range(len(CSA)):
            a = CSA[i][0]
            b = CSA[i][1]
            vxa = vx[a] - vx[b]
            vya = vy[a] - vy[b]
            vza = vz[a] - vz[b]
            xa = (x[a] - x[b]) / constants.Bohr2Ang
            ya = (y[a] - y[b]) / constants.Bohr2Ang
            za = (z[a] - z[b]) / constants.Bohr2Ang
            rma = 1.0 / masses[a]
            rmb = 1.0 / masses[b]
            dABvdAB = (xa * vxa + ya * vya + za * vza)
            # print "dABvdAB=",dABvdAB
            if abs(dABvdAB) > (0.0 + tol):
                constr = dABvdAB / ((rma + rmb) * (iniD[i]))
                # print "Constraint no,",i," in2nd loop:",constr
                vx[a] = vx[a] - (constr * xa * rma)
                vy[a] = vy[a] - (constr * ya * rma)
                vz[a] = vz[a] - (constr * za * rma)
                vx[b] = vx[b] + (constr * xa * rmb)
                vy[b] = vy[b] + (constr * ya * rmb)
                vz[b] = vz[b] + (constr * za * rmb)
                check.append(False)
            else:
                check.append(True)
        if False in check:
            loop = False
        else:
            loop = True

    return vx,vy,vz

def rattle_second(CSA,vxh,vyh,vzh,xh,yh,zh,xo,yo,zo,masses,tol,iniD,tstep):
    loop = False
    while not loop:
        check = []
        for i in range(len(CSA)):
            a = CSA[i][0]
            b = CSA[i][1]
            xa = (xh[a] - xh[b]) / constants.Bohr2Ang
            ya = (yh[a] - yh[b]) / constants.Bohr2Ang
            za = (zh[a] - zh[b]) / constants.Bohr2Ang
            Dt = (xa * xa + ya * ya + za * za)
            diff = Dt - iniD[i]
            if abs(diff) > (0.0 + tol):
                cbABbAB = (xo[i] * xa + yo[i] * ya + zo[i] * za)
                rma = 1.0 / masses[a]
                rmb = 1.0 / masses[b]
                constr = diff / (2.0 * tstep * cbABbAB * (rma + rmb))
                xh[a] = xh[a] - (constr * tstep * xo[i] * rma) * constants.Bohr2Ang
                yh[a] = yh[a] - (constr * tstep * yo[i] * rma) * constants.Bohr2Ang
                zh[a] = zh[a] - (constr * tstep * zo[i] * rma) * constants.Bohr2Ang
                xh[b] = xh[b] + (constr * tstep * xo[i] * rmb) * constants.Bohr2Ang
                yh[b] = yh[b] + (constr * tstep * yo[i] * rmb) * constants.Bohr2Ang
                zh[b] = zh[b] + (constr * tstep * zo[i] * rmb) * constants.Bohr2Ang
                vxh[a] = vxh[a] - (constr * xo[i] * rma)
                vyh[a] = vyh[a] - (constr * yo[i] * rma)
                vzh[a] = vzh[a] - (constr * zo[i] * rma)
                vxh[b] = vxh[b] + (constr * xo[i] * rmb)
                vyh[b] = vyh[b] + (constr * yo[i] * rmb)
                vzh[b] = vzh[b] + (constr * zo[i] * rmb)
                check.append(False)
            else:
                check.append(True)
        if False in check:
            loop = False
        else:
            loop = True

    return vxh,vyh,vzh,xh,yh,zh

@Timer("vel-verlet")
def run(cobcom, geometry, command, Tot_Grad_New, Tot_Grad, E_pot, step, iniD, CSA):
    sef = shelve.open("cobram-sef")
    newstate = sef['newstate']
    if step == 0:
        tstep_OLD = float('0.0')
    else:
        tstep_OLD = sef['tstep_OLD']
    sef.close()

    at = [geometry.atomLabel[i - 1] for i in geometry.list_MEDIUM_HIGH]
    x, y, z = geometry.MEDIUM_HIGH[:]

    try:
        inp1 = open('TSTEP')
        ttry = inp1.read().strip()
    except:
        ttry = 'long'
    if ttry == 'short':
        tstep = float(command[84]) * float('41.341373337')
    else:
        tstep = float(command[83]) * float('41.341373337')

    # RATTLE constrained atoms
    # RATTLE store initial CRD and actual CRD
    if step == 0:
        iniD = []
        RAT = CBF.ReadCobramCommand(cobcom, 'RATTLE', 'RATTLE')
        if RAT == "":
            RAT = CBF.ReadCobramCommand(cobcom, 'rattle', 'rattle')
        for i in range(len(RAT)):
            ele = RAT[i].split()
            a = [int(ele[0]) - 1, int(ele[1]) - 1]
            CSA.append(a)
    xo, yo, zo = [], [], []
    tol = float('1.0E-7')
    for i in range(len(CSA)):
        xo.append((x[CSA[i][0]] - x[CSA[i][1]]) / constants.Bohr2Ang)
        yo.append((y[CSA[i][0]] - y[CSA[i][1]]) / constants.Bohr2Ang)
        zo.append((z[CSA[i][0]] - z[CSA[i][1]]) / constants.Bohr2Ang)
        if step == 0:
            iniD.append((xo[i]) ** 2 + (yo[i]) ** 2 + (zo[i]) ** 2)
    vx, vy, vz = [], [], []
    # read velocities
    if os.path.isfile('velocity.dat'):
        shutil.copyfile('velocity.dat', 'velocityOLD.dat')
        inp = open('velocity.dat')
        vel = inp.read().split('\n')
        inp.close()
        for i in range(len(x)):
            vel2 = vel[i].split()
            vx.append(float(vel2[0]))
            vy.append(float(vel2[1]))
            vz.append(float(vel2[2]))
    else:
        for i in range(len(x)):
            vx.append(float('0.0'))
            vy.append(float('0.0'))
            vz.append(float('0.0'))

    masses = []
    for i in range(len(at)):
        atommass = constants.atommass(at[i])
        if atommass is None:
            logwrt.fatalerror('no mass for ' + at[i] + ', please modify the code')
        else:
            masses.append(atommass)

    # print "Entering ISOTOPES section in Vverlet"
    masses,vx,vy,vz = isotopes(cobcom,command,masses,step,vx,vy,vz)
    vx_bkp = copy.deepcopy(vx)
    vy_bkp = copy.deepcopy(vy)
    vz_bkp = copy.deepcopy(vz)

    dex = Tot_Grad_New[0]
    dey = Tot_Grad_New[1]
    dez = Tot_Grad_New[2]
    logwrt.writeLog("\nGradient of state %2d" % (newstate+1) +" used in Vverlet\n",2)
    for i in range(len(dex)):
        logwrt.writeLog("%12.6f" % dex[i] + "%12.6f" % dey[i] + "%12.6f\n" % dez[i], 2)
    logwrt.writeLog('\n', 3)

    # Second half step VV
    for i in range(len(at)):
        vx[i] = vx[i] - 0.5 * tstep_OLD * (dex[i]) / masses[i]
        vy[i] = vy[i] - 0.5 * tstep_OLD * (dey[i]) / masses[i]
        vz[i] = vz[i] - 0.5 * tstep_OLD * (dez[i]) / masses[i]

    # RATTLE second loop update velocity
    vx,vy,vz = rattle_first(CSA,vx,vy,vz,x,y,z,masses,tol,iniD)
    vx = np.array(vx)
    vy = np.array(vy)
    vz = np.array(vz)
    
    # Kinetic energy before re-scaling
    E_kin = np.add.reduce(0.5 * (vx ** 2 + vy ** 2 + vz ** 2) * np.array(masses))

    # scaling velocity in case of hop
    if int(command[85]) > 0 and os.path.exists(os.getcwd() + '/HOP'):
        logwrt.writeLog("\n")
        logwrt.startSubSection("Scaling velocities after hop")

        etot = float(os.popen('cat ETOT').read())

        # read variables from shelve: state, newstate and NAC/TDC
        sef = shelve.open("cobram-sef", 'r')
        state = sef['state']
        newstate = sef['newstate']
        # in case of command[206] == '0', scaling is done in the direction of the NAC 
        # in case of command[206] == '2', scaling is done in the direction of gradient difference
        if command[206] == '0':
            NAC = sef['NAC']
        elif command[206] == '2':
            GD = sef['GD']
        sef.close()

        # print debug info on the initial and final states of the hopping
        logwrt.writeLog('\nStates before and after hop: state {0} newstate {1}\n'.format(state + 1, newstate + 1), 1)

        # extract initial velocity and store it
        vx0, vy0, vz0 = [], [], []
        for i in range(len(vx)):
            vx0.append(vx[i])
            vy0.append(vy[i])
            vz0.append(vz[i])
        vx0, vy0, vz0 = np.array(vx0), np.array(vy0), np.array(vz0)

        # initialize variable to store the outcome of the scaling ("false" for a frustrated hop)
        veloc = ""

        # in case of command[206] == '0', scaling is done in the direction of the NAC
        if command[206] == '0':
            xdc = np.array(NAC[state][newstate][0])
            ydc = np.array(NAC[state][newstate][1])
            zdc = np.array(NAC[state][newstate][2])
        # in case of command[206] == '2', scaling is done in the direction of the gradient difference
        elif command[206] == '2':
            xdc = np.array(GD[0])
            ydc = np.array(GD[1])
            zdc = np.array(GD[2])
        
        if command[206] in ('0', '2'):
            # print debug info on the direction of the rescaling
            logwrt.writeLog('\nDirection for scaling velocites after hopping:\n', 2)

            for i in range(len(xdc)):
                logwrt.writeLog("%12.6f" % xdc[i] + "%12.6f" % ydc[i] + "%12.6f\n" % zdc[i], 2)
            logwrt.writeLog('\n', 2)

            # correct the velocity in the direction defined by xdc, ydc, zdc
            veloc = product.velrescale(masses, geometry, command, xdc, ydc, zdc, E_pot, E_kin, etot, tstep, tstep_OLD,
                                       vx, vy, vz, cobcom)

        # in case of command[206] == '1', use another type of rescaling --> velocity rescaling
        elif command[206] == '1':

            # do simple rescaling of the velocity
            veloc = product.velscalev(masses, geometry, command, E_pot, E_kin, etot, tstep, tstep_OLD, vx, vy, vz,
                                      cobcom)

        if veloc == 'false':
            print( "The hop was rejected, we do not have enough kinetic energy to redistribute")
            print( "Resetting velocities to old velocities")
            vx = copy.deepcopy(vx_bkp)
            vy = copy.deepcopy(vy_bkp)
            vz = copy.deepcopy(vz_bkp)
            dex = Tot_Grad[0]
            dey = Tot_Grad[1]
            dez = Tot_Grad[2]
            logwrt.writeLog("\nGradient of state %2d" % (state+1) +" used in Vverlet\n",2)
            for i in range(len(dex)):
                logwrt.writeLog("%12.6f" % dex[i] + "%12.6f" % dey[i] + "%12.6f\n" % dez[i], 2)
            logwrt.writeLog('\n', 3)
  
            # Second half step VV
            for i in range(len(at)):
                vx[i] = vx[i] - 0.5 * tstep_OLD * (dex[i]) / masses[i]
                vy[i] = vy[i] - 0.5 * tstep_OLD * (dey[i]) / masses[i]
                vz[i] = vz[i] - 0.5 * tstep_OLD * (dez[i]) / masses[i]
  
            # RATTLE second loop update velocity
            vx,vy,vz = rattle_first(CSA,vx,vy,vz,x,y,z,masses,tol,iniD)
  
            vx = np.array(vx)
            vy = np.array(vy)
            vz = np.array(vz)
  
            # Kinetic energy before re-scaling
            E_kin = np.add.reduce(0.5 * (vx ** 2 + vy ** 2 + vz ** 2) * np.array(masses))

            print( "resetting QM inputs and cobram.command")
            newstate = state
            sef = shelve.open("cobram-sef")
            sef['newstate'] = state
            threshold = float(command[86])
            calc_coupl = sef['calc_coupl']
            DEarray = sef['DE_oldarray']
            E_pot = sef['E_pot']
            sef.close()
            if int(command[2]) > 1:
                print( 'SEF-store state', state + 1)
            if command[51] == '7':
                molpro.couplings_on(DEarray, threshold, newstate, calc_coupl)
        else:
            vx, vy, vz = veloc[0], veloc[1], veloc[2]
            sef = shelve.open("cobram-sef")
            sef['state'] = newstate
            sef.close()
        os.remove('HOP')
    #F: command[85] == '1' does not exist anymore
    #elif command[85] == '1' and os.path.exists(os.getcwd() + '/HOP'):
    #    os.remove('HOP')
    
    # Kinetic energy after hopping
    E_kin = np.add.reduce(
        np.array(0.5 * (np.array(vx) ** 2 + np.array(vy) ** 2 + np.array(vz) ** 2) * np.array(masses)))

    # computing velocities at t+0.5dt and atomic positions at t+dt
    vxh, vyh, vzh, xh, yh, zh = [], [], [], [], [], []
    for i in range(len(at)):
        vxh.append(vx[i] - 0.5 * (tstep * dex[i] / masses[i]))
        vyh.append(vy[i] - 0.5 * (tstep * dey[i] / masses[i]))
        vzh.append(vz[i] - 0.5 * (tstep * dez[i] / masses[i]))
    for i in range(len(at)):
        xh.append((x[i] / constants.Bohr2Ang + vxh[i] * tstep) * constants.Bohr2Ang)
        yh.append((y[i] / constants.Bohr2Ang + vyh[i] * tstep) * constants.Bohr2Ang)
        zh.append((z[i] / constants.Bohr2Ang + vzh[i] * tstep) * constants.Bohr2Ang)

    # RATTLE first iterative loop update geometry and velocity
    # correct final velocities and positions for RATTLE constraints
    vxh,vyh,vzh,xh,yh,zh = rattle_second(CSA,vxh,vyh,vzh,xh,yh,zh,xo,yo,zo,masses,tol,iniD,tstep)

    with open("EKIN", "w") as f:
        f.write(str(E_kin))
    E_tot = E_pot + E_kin

    # monitoring the total energy (currently switched-off);
    # take into account that once in the GS we can switch smoothly or abruptly
    # to single state description which will introduce a change in the total energy
    sef = shelve.open("cobram-sef", 'r')
    state = sef['newstate']
    sef.close()
    if os.path.exists(os.getcwd() + '/ETOT'):
        E_tot_old = float(os.popen('cat ETOT').read())
        # if lists[6][92] == '0' and lists[6][93] == '0':
        #    if state != 0 and abs(627.5*(E_tot-E_tot_old)) > 3.0 :   put to 10 for testing! OW
        #    if state != 0 and abs(627.5*(E_tot-E_tot_old)) > 10.0 :
        #        logwrt.fatalerror('Total energy changed by more than 3.0 kcal/mol.')
        #        logwrt.fatalerror('Total energy changed by more than 10.0 kcal/mol.')
    with open("ETOT", "w") as f:
        f.write(str(E_tot))

    # save values to SEF
    sef = shelve.open("cobram-sef")
    sef['E_tot'] = E_tot
    sef['E_pot'] = E_pot
    sef['E_kin'] = E_kin
    sef['tstep_OLD'] = tstep
    sef.close()

    out = open('velocity.dat', 'w')
    for i in range(len(xh)):
        out.write(' %16.10f' % float(vxh[i]) + ' %16.10f' % float(vyh[i]) + ' %16.10f\n' % float(vzh[i]))
    out.close()

    # writing velocity at time=t
    _out = open('velocity_0.dat', 'w')
    for i in range(len(xh)):
        _out.write(' %16.10f' % float(vx[i]) + ' %16.10f' % float(vy[i]) + ' %16.10f\n' % float(vz[i]))
    _out.close()

    X = np.array(xh)
    Y = np.array(yh)
    Z = np.array(zh)
    xf, yf, zf = [], [], []
    # pass geometry
    for i in range(len(at)):
        xf.append(X[i])
        yf.append(Y[i])
        zf.append(Z[i])

    XF = np.array(xf)
    YF = np.array(yf)
    ZF = np.array(zf)

    newgeom = [XF, YF, ZF]
    Item = [E_tot, E_pot, E_kin, None, None]
    mdinfo = []
    MD_results = [mdinfo, Item, newgeom, tstep, iniD, CSA]

    return MD_results
